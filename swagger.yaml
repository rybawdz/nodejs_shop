openapi: 3.0.0
info:
  description: |
    weppo project
  version: "1.0.0"
  title: Nodejs shop
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MIRIAMBOUH/nodejs-shop/1.0.0
  - url: 'https://store.swagger.io/v2'
tags:
  - name: product
    description: Everything about your products
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to store orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /product:
    post:
      tags:
        - product
      summary: Add a new product to the store
      operationId: addProduct
      responses:
        '405':
          description: Invalid input
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
      requestBody:
        $ref: '#/components/requestBodies/product'
    put:
      tags:
        - product
      summary: Update an existing product
      operationId: updateproduct
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
        '405':
          description: Validation exception
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
      requestBody:
        $ref: '#/components/requestBodies/product'
  /product/findByStatus:
    get:
      tags:
        - product
      summary: Finds products by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findproductsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          description: Invalid status value
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
  /product/findByTags:
    get:
      tags:
        - product
      summary: Finds products by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findproductsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          description: Invalid tag value
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
      deprecated: true
  '/product/{productId}':
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getproductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
            application/xml:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
      security:
        - api_key: []
    post:
      tags:
        - product
      summary: Updates a product in the store with form data
      operationId: updateproductWithForm
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the product
                  type: string
                status:
                  description: Updated status of the product
                  type: string
    delete:
      tags:
        - product
      summary: Deletes a product
      operationId: deleteproduct
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
  '/product/{productId}/uploadImage':
    post:
      tags:
        - product
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - store_auth:
            - 'write:products'
            - 'read:products'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns product inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a product
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the product
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      parameters:
        - name: userId
          in: cookie
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/info:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: userId
          in: cookie
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/update:
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: cookie
          description: name that need to be updated
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: new password
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /user/delete:
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: cookie
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    product:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: product status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/product'
        application/xml:
          schema:
            $ref: '#/components/schemas/product'
      description: product object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://store.swagger.io/oauth/dialog'
          scopes:
            'write:products': modify products in your account
            'read:products': read your products
    api_key:
      type: apiKey
      name: api_key
      in: header