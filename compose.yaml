services:

  server:
    build:
      context: ./dockerfiles
      dockerfile: 'node.dockerfile'
    ports:
     - '4040:4040'
    working_dir: /home/node/app
    networks:
      - front-tier
      - monitoring
      - back-tier
    volumes:
      - ./src/server:/home/node/app
    environment:
      - NODE_ENV=production
    command: npm start
    depends_on:
      - mongo

  app:
    build:
      context: ./dockerfiles
      dockerfile: 'app.dockerfile'
    ports:
      - '3000:3000'
    working_dir: /home/frontend
    networks:
      - front-tier
    volumes:
      - ./src/shop-frontend:/home/frontend
    depends_on:
      - server
    command: npm run dev

  mongo:
    image: mongo
    restart: always
    networks:
      - back-tier
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_ROOT_DATABASE: admin
    volumes: 
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    networks:
      - back-tier
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/



volumes:
  grafana-storage: {}
  prometheus-storage: {}

networks:
  front-tier:
  monitoring:
    driver: bridge
  back-tier: