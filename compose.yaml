services:

  server:
    build:
      context: ./dockerfiles
      dockerfile: 'node.dockerfile'
    ports:
     - '4040:4040'
    working_dir: /home/node/app
    networks:
      - front-tier
      - monitoring
    volumes:
      - ./src/server:/home/node/app
    environment:
      - NODE_ENV=production
    command: npm start
    depends_on:
      - mongo

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  grafana:
    image: grafana/grafana-enterprise
    depends_on:
      - prometheus
    ports: 
      - 3000:3000
    networks:
      - monitoring
      - front-tier
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    restart: always

  prometheus:
    image: bitnami/prometheus
    ports: 
      - 9090:9090
    volumes:
      - prometheus-storage:/prometheus
      - ./prometheus/prometheus.yaml:/prometheus.yaml
    networks:
      - monitoring
    command: 
      - '--config.file=/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'


volumes:
  grafana-storage: {}
  prometheus-storage: {}

networks:
  front-tier:
  monitoring:
    driver: bridge
